名稱：
	call_other() - 呼叫在另一個物件中的函式。
語法：
	mixed call_other( mixed ob, string func, ... );
	mixed call_other( mixed ob, array args ); 
	mixed call_other( array obs, string func, ... ); 
	mixed call_other( array obs, array args ); 

	混合 call_other( 混合 物件, 字串 函式, ... );
	混合 call_other( 混合 物件, 陣列 參數 ); 
	混合 call_other( 陣列 物件, 字串 函式, ... ); 
	混合 call_other( 陣列 物件, 陣列 參數 ); 
用法：
	ob 是一個物件指標，或是字串檔名〈合於 find_object()〉。obs 是一個
	物件指標與字串的陣列。第一個參數使用陣列會對陣列中的每一個元素作
	call_other，並傳回結果的陣列。
	如果陣列用於 args，則第一個元素是函式名稱，剩餘的是參數；即：

	call_other(ob, ({ "foo", 1, 3, 5 }))
	與
	call_other(ob, "foo", 1, 3, 5)

	相同。這樣會以 (1, 3, 5) 為參數，呼叫物件 ob 中的函式 foo()。
	call_other() 的傳回值就是 foo() 函式的傳回值。如果 ob 是一個物件的
	陣列，則傳回值就是傳回值的陣列。

	這裡有個更好的方法使用 call_other：

	call_other(x, "y", z, ...) 就如同：

	x->y(z, ...)

	即：

	call_other(ob, "query_name");

	可以寫成：

	ob->query_name();

	寫出 call_other 呼叫主要用於函式名稱存於一個變數中，即：

	void do_test(string fname, int x) {
		call_other(fname, "test_" + x);
	}

	以陣列作為第一個參數的例子：

	users()->quit();
作者：
	Tim Hollebeek  Beek@ZorkMUD, Lima Bean, IdeaExchange, and elsewhere
翻譯：
	spock@muds.net		2000.May.21.	v22 版
